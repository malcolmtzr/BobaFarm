{"version":3,"sources":["getWeb3.js","redux/accountSlice.js","components/MetaMaskHandler.js","components/StakingTable.js","components/Mainpage.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","accountSlice","createSlice","name","initialState","value","reducers","setAccount","state","action","payload","account","extraReducers","actions","MetaMaskHandler","props","dispatch","useDispatch","useEffect","on","handleAccountChange","userAccount","handleConnect","request","method","response","length","alert","Button","variant","onClick","sx","width","StakingTable","useState","stakeMilk2Amount","stakeTea2Amount","stakePearl2Amount","stakingAmounts","setStakingAmounts","milk2Input","useRef","tea2Input","pearl2Input","milk2InputError","setMilk2InputError","tea2InputError","setTea2InputError","pearl2InputError","setPearl2InputError","milk2ErrorText","setMilk2ErrorText","tea2ErrorText","setTea2ErrorText","pearl2ErrorText","setPearl2ErrorText","Box","display","justifyItems","Typography","Divider","style","onUpdateStakeBalances","disabled","onUpdatingStakeBalances","Grid","container","spacing","paddingTop","item","xs","Card","raised","minWidth","CardContent","fontSize","CardActions","TextField","type","id","size","label","onChange","event","RegExp","test","target","prevState","inputRef","error","helperText","onStakingBalances","milk2StakingBalance","tea2StakingBalance","pearl2StakingBalance","fullWidth","onStake","current","onLoadingStaking","onHarvest","onLoadingHarvest","alignItems","justifyContent","onRewardBalance","Mainpage","useSelector","account1","setAccount1","bobaContract","setBobaContract","bobaFarmContract","setBobaFarmContract","milkToken2Contract","setMilkToken2Contract","teaToken2Contract","setTeaToken2Contract","pearlToken2Contract","setPearlToken2Contract","stakingBalances","setStakingBalances","bobaBalance","setBobaBalance","openDialogue","setOpenDialogue","openHarvestDialogue","setOpenHarvestDialogue","loadingStaking","setLoadingStaking","loadingHarvest","setLoadingHarvest","isUpdatingStakeBalances","setIsUpdatingStakeBalances","callGetWeb3","loadAccount","eth","getAccounts","accounts","location","reload","loadFarm","net","getId","netId","bobaFarmData","BobaFarm","networks","bobaFarm","Contract","abi","address","loadTokens","bobaTokenData","BobaToken","milkToken2Data","MilkToken2","teaToken2Data","TeaToken2","pearlToken2Data","PearlToken2","bobaToken","milkToken2","teaToken2","pearlToken2","methods","balanceOf","call","_bobaBalance","handleStaking","handleDialogueOpen","toStakeMilk2","toStakeTea2","toStakePearl2","approve","_address","send","from","stakeTokens","handleHarvest","harvestRewards","then","receipt","handleHarvestDialogueOpen","getStakeBalances","getMilkStakingBalance","_milk2StakingBalance","getTeaStakingBalance","_tea2StakingBalance","getPearlStakingBalance","_pearl2StakingBalance","setTimeout","handleDialogueClose","handleHarvestDialogueClose","acc","loadBlockchainData","removeListener","gutterBottom","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","App","document","body","backgroundColor","Boolean","hostname","match","configureStore","reducer","accountReducer","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a98e468.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport getWeb3 from '../getWeb3';\r\n\r\n// export const getAccount = createAsyncThunk(\r\n//     \"account/getAccount\",\r\n//     async(thunkAPI) => {\r\n//     }\r\n// )\r\n\r\nexport const accountSlice = createSlice({\r\n    name: \"account\", \r\n    initialState: {\r\n        value: \"\"\r\n    },\r\n    reducers: {\r\n        setAccount: (state, action) => {\r\n            state.value = action.payload.account\r\n        }\r\n    },\r\n    extraReducers: {\r\n\r\n    }\r\n});\r\n\r\nexport const { setAccount } = accountSlice.actions;\r\n\r\nexport default accountSlice.reducer;","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAccount } from \"../redux/accountSlice\";\r\nimport getWeb3 from \"../getWeb3\"\r\nimport Web3 from \"web3\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nexport default function MetaMaskHandler(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (window.ethereum) {\r\n            window.ethereum.on(\"accountsChanged\", handleAccountChange)\r\n        }\r\n    }, []);\r\n\r\n    const handleAccountChange = (userAccount) => {\r\n        dispatch(setAccount({\r\n            account: userAccount[0]\r\n        }));\r\n    }\r\n\r\n    const handleConnect = async () => {\r\n        if (window.ethereum) {\r\n            try {\r\n                const response = await window.ethereum.request(\r\n                    {\r\n                        method: \"eth_requestAccounts\"\r\n                    }\r\n                );\r\n                handleAccountChange(response);\r\n                if (response.length !== 0) {\r\n                    alert(\"Connected\");\r\n                }\r\n            }\r\n            catch (error) {\r\n                alert(\"Check MetaMask extension\")\r\n            }\r\n        }\r\n        else {\r\n            alert(\"Please install MetaMask\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" onClick={handleConnect} sx={{width: \"100%\"}}>\r\n                Connect to MetaMask\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Box, Divider, Grid, Typography } from \"@mui/material\";\r\nimport { Card } from \"@mui/material\";\r\nimport { CardContent } from \"@mui/material\";\r\nimport { CardActions } from \"@mui/material\";\r\nimport { TextField } from \"@mui/material\";\r\nimport { Button } from \"@mui/material\";\r\nimport LocalDrinkIcon from '@mui/icons-material/LocalDrink';\r\nimport SpaIcon from '@mui/icons-material/Spa';\r\nimport GrainIcon from '@mui/icons-material/Grain';\r\n\r\n\r\nexport default function StakingTable(props) {\r\n\r\n    const [stakingAmounts, setStakingAmounts] = useState(\r\n        {\r\n            stakeMilk2Amount: 0,\r\n            stakeTea2Amount: 0,\r\n            stakePearl2Amount: 0\r\n        }\r\n    );\r\n\r\n    const milk2Input = useRef(null);\r\n    const tea2Input = useRef(null);\r\n    const pearl2Input = useRef(null);\r\n\r\n    const [milk2InputError, setMilk2InputError] = useState(false);\r\n    const [tea2InputError, setTea2InputError] = useState(false);\r\n    const [pearl2InputError, setPearl2InputError] = useState(false);\r\n\r\n    const [milk2ErrorText, setMilk2ErrorText] = useState(\"\");\r\n    const [tea2ErrorText, setTea2ErrorText] = useState(\"\");\r\n    const [pearl2ErrorText, setPearl2ErrorText] = useState(\"\");\r\n    \r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    const onStakeMilk2Change = (event) => {\r\n        let regex = new RegExp(\"^\\\\d+$\");\r\n        let isValid = regex.test(event.target.value);\r\n        if (!isValid) {\r\n            setMilk2InputError(true);\r\n            setMilk2ErrorText(\"Invalid input\");\r\n        }\r\n        else {\r\n            setMilk2InputError(false);\r\n            setMilk2ErrorText(\"\");\r\n            setStakingAmounts(prevState => ({\r\n                ...prevState,\r\n                stakeMilk2Amount: event.target.value\r\n            })\r\n            );\r\n        }\r\n    };\r\n\r\n    const onStakeTea2Change = (event) => {\r\n        let regex = new RegExp(\"^\\\\d+$\");\r\n        let isValid = regex.test(event.target.value);\r\n        if (!isValid) {\r\n            setTea2InputError(true);\r\n            setTea2ErrorText(\"Invalid input\");\r\n        }\r\n        else {\r\n            setTea2InputError(false);\r\n            setTea2ErrorText(\"\");\r\n            setStakingAmounts(prevState => ({\r\n                ...prevState,\r\n                stakeTea2Amount: event.target.value\r\n            })\r\n            );\r\n        }\r\n    };\r\n\r\n    const onStakePearl2Change = (event) => {\r\n        let regex = new RegExp(\"^\\\\d+$\");\r\n        let isValid = regex.test(event.target.value);\r\n        if (!isValid) {\r\n            setPearl2InputError(true);\r\n            setPearl2ErrorText(\"Invalid input\");\r\n        }\r\n        else {\r\n            setPearl2InputError(false);\r\n            setPearl2ErrorText(\"\");\r\n            setStakingAmounts(prevState => ({\r\n                ...prevState,\r\n                stakePearl2Amount: event.target.value\r\n            })\r\n            );\r\n        }\r\n    };\r\n\r\n    const onStake = () => {\r\n        props.onStake(stakingAmounts);\r\n        milk2Input.current.value=\"\";\r\n        tea2Input.current.value=\"\";\r\n        pearl2Input.current.value=\"\";\r\n    };\r\n\r\n    const onHarvest = () => {\r\n        props.onHarvest();\r\n    };\r\n\r\n    const onUpdateStakeBal = () => {\r\n        props.onUpdateStakeBalances();\r\n    }\r\n\r\n    return(\r\n        <Box sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n            <Typography variant=\"h5\">Tokens</Typography>\r\n            <Divider style={{width: \"100%\"}}/>\r\n            <Button onClick={onUpdateStakeBal} disabled={props.onUpdatingStakeBalances}>\r\n                {props.onUpdatingStakeBalances ? \"Retreiving...\" : \"Get Staked Amounts on Farm\"}\r\n            </Button>\r\n            <Grid container spacing={25} paddingTop=\"10px\">\r\n                <Grid item xs={4}>\r\n                    <Card raised sx={{minWidth: 170}}>\r\n                        <CardContent sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n                            <Typography variant=\"h6\">\r\n                                MILK2\r\n                            </Typography>\r\n                            <LocalDrinkIcon fontSize=\"large\" sx={{paddingTop: \"10px\"}}/>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Box sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n                                <Typography variant=\"button\">\r\n                                    Stake Token:\r\n                                </Typography>\r\n                                <TextField \r\n                                type=\"number\" \r\n                                id=\"stakeMilk2Value\" \r\n                                size=\"small\" \r\n                                variant=\"outlined\" \r\n                                label=\"Amount\" \r\n                                onChange={onStakeMilk2Change} \r\n                                inputRef={milk2Input} \r\n                                error={milk2InputError} \r\n                                helperText={milk2ErrorText}/>\r\n                                <Typography variant=\"button\">Staked on Farm: {props.onStakingBalances.milk2StakingBalance}</Typography>\r\n                            </Box>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Card raised sx={{minWidth: 170}}>\r\n                        <CardContent sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n                            <Typography variant=\"h6\">\r\n                                TEA2\r\n                            </Typography>\r\n                            <SpaIcon fontSize=\"large\" sx={{paddingTop: \"10px\"}}/>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Box sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n                                <Typography variant=\"button\">\r\n                                    Stake Token:\r\n                                </Typography>\r\n                                <TextField \r\n                                type=\"number\" \r\n                                id=\"stakeTea2Value\" \r\n                                size=\"small\"  \r\n                                variant=\"outlined\" \r\n                                label=\"Amount\" \r\n                                onChange={onStakeTea2Change} \r\n                                inputRef={tea2Input} \r\n                                error={tea2InputError} \r\n                                helperText={tea2ErrorText}/>\r\n                                <Typography variant=\"button\">Staked on Farm: {props.onStakingBalances.tea2StakingBalance}</Typography>\r\n                            </Box>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Card raised sx={{minWidth: 170}}>\r\n                        <CardContent sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n                            <Typography variant=\"h6\">\r\n                                PEARL2\r\n                            </Typography>\r\n                            <GrainIcon fontSize=\"large\" sx={{paddingTop: \"10px\"}}/>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Box sx={{display: \"grid\", justifyItems: \"center\"}}>\r\n                                <Typography variant=\"button\">\r\n                                    Stake Token:\r\n                                </Typography>\r\n                                <TextField \r\n                                type=\"number\" \r\n                                id=\"stakePearl2Value\" \r\n                                size=\"small\"  \r\n                                variant=\"outlined\" \r\n                                label=\"Amount\" \r\n                                onChange={onStakePearl2Change} \r\n                                inputRef={pearl2Input} \r\n                                error={pearl2InputError} \r\n                                helperText={pearl2ErrorText}/>\r\n                                <Typography variant=\"button\">Staked on Farm: {props.onStakingBalances.pearl2StakingBalance}</Typography>\r\n                            </Box>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n            <Divider style={{width: \"100%\", paddingTop:\"10px\"}}/>\r\n            <Box sx={{display: \"grid\", justifyItems: \"center\", paddingTop: \"10px\", width: \"100%\"}}>\r\n                <Button variant=\"contained\" fullWidth onClick={onStake} disabled={props.onLoadingStaking}>\r\n                    {props.onLoadingStaking ? \"Working on it... MetaMask will pop up a number of times\" : \"Stake Tokens\"}\r\n                </Button>\r\n            </Box>\r\n            <Typography variant=\"h5\" sx={{paddingTop: \"40px\"}}>Rewards</Typography>\r\n            <Divider style={{width: \"100%\"}}/>\r\n            <Box sx={{display: \"grid\", justifyItems: \"center\", paddingTop: \"10px\", width: \"100%\"}}>\r\n                <Button variant=\"contained\" fullWidth onClick={onHarvest} disabled={props.onLoadingHarvest}>\r\n                    {props.onLoadingHarvest ? \"Working on it...\" : \"Harvest Rewards\"}\r\n                </Button>\r\n            </Box>\r\n            <Box sx={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", paddingTop: \"10px\", width: \"100%\"}}>\r\n                <Typography variant=\"h4\" sx={{paddingTop: \"20px\"}}>Current wallet balance: </Typography>\r\n                <Typography variant=\"h4\" sx={{paddingTop: \"20px\"}}>{props.onRewardBalance} BOBA</Typography>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setAccount } from \"../redux/accountSlice\";\r\nimport getWeb3 from \"../getWeb3\"\r\nimport Web3 from \"web3\";\r\nimport BobaToken from \"../contracts/BobaToken.json\";\r\nimport BobaFarm from \"../contracts/BobaFarm.json\";\r\nimport MilkToken2 from \"../contracts/MilkToken2.json\";\r\nimport TeaToken2 from \"../contracts/TeaToken2.json\";\r\nimport PearlToken2 from \"../contracts/PearlToken2.json\";\r\nimport MetaMaskHandler from \"./MetaMaskHandler\";\r\nimport StakingTable from \"./StakingTable\";\r\nimport { Box, Typography, Button } from \"@mui/material\";\r\nimport {Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions} from \"@mui/material\";\r\n\r\nexport default function Mainpage() {\r\n    const dispatch = useDispatch();\r\n    const account = useSelector((state) => state.account.value);\r\n    const [account1, setAccount1] = useState(\"\");\r\n    const [bobaContract, setBobaContract] = useState(\"\");\r\n    const [bobaFarmContract, setBobaFarmContract] = useState(\"\");\r\n    const [milkToken2Contract, setMilkToken2Contract] = useState(\"\");\r\n    const [teaToken2Contract, setTeaToken2Contract] = useState(\"\");\r\n    const [pearlToken2Contract, setPearlToken2Contract] = useState(\"\");\r\n    const [stakingBalances, setStakingBalances] = useState(\r\n        {\r\n            milk2StakingBalance: \"\",\r\n            tea2StakingBalance: \"\",\r\n            pearl2StakingBalance: \"\"\r\n        }\r\n    );\r\n    const [bobaBalance, setBobaBalance] = useState(0);\r\n    const [openDialogue, setOpenDialogue] = useState(false);\r\n    const [openHarvestDialogue, setOpenHarvestDialogue] = useState(false);\r\n    const [loadingStaking, setLoadingStaking] = useState(false);\r\n    const [loadingHarvest, setLoadingHarvest] = useState(false);\r\n    const [isUpdatingStakeBalances, setIsUpdatingStakeBalances] = useState(false);\r\n\r\n    const callGetWeb3 = async () => {\r\n        return await getWeb3();\r\n    }\r\n\r\n    const loadAccount = async (web3) => {\r\n        const account = await web3.eth.getAccounts();\r\n        if (account) {\r\n            setAccount1(account[0])\r\n            return account[0];\r\n        }\r\n        else {\r\n            alert(\"Please connect to MetaMask\");\r\n        }\r\n    }\r\n\r\n    const handleAccountChange = (...args) => {\r\n        const accounts = args[0];\r\n        if (accounts.length === 0) {\r\n          console.log(\"Please connect to MetaMask\");\r\n        }\r\n        else if (accounts[0] !== account1) {\r\n          setAccount1(accounts[0]);\r\n          window.location.reload(false);\r\n        }\r\n      };\r\n\r\n    const loadFarm = async (web3, account) => {\r\n        const netId = await web3.eth.net.getId();\r\n        const bobaFarmData = BobaFarm.networks[netId];\r\n        if (bobaFarmData) {\r\n            const bobaFarm = new web3.eth.Contract(BobaFarm.abi, bobaFarmData.address);\r\n            setBobaFarmContract(bobaFarm);\r\n        }\r\n        else {\r\n            alert(\"BobaFarm contract not deployed to network, please change to Ropsten Testnet Newtwork and refresh\");\r\n        }\r\n    }\r\n\r\n    const loadTokens = async (web3, account) => {\r\n        try {\r\n            const netId = await web3.eth.net.getId();\r\n            const bobaTokenData = BobaToken.networks[netId];\r\n            const milkToken2Data = MilkToken2.networks[netId];\r\n            const teaToken2Data = TeaToken2.networks[netId];\r\n            const pearlToken2Data = PearlToken2.networks[netId];\r\n            const bobaToken = new web3.eth.Contract(BobaToken.abi, bobaTokenData.address);\r\n            const milkToken2 = new web3.eth.Contract(MilkToken2.abi, milkToken2Data.address);\r\n            const teaToken2 = new web3.eth.Contract(TeaToken2.abi, teaToken2Data.address)\r\n            const pearlToken2 = new web3.eth.Contract(PearlToken2.abi, pearlToken2Data.address);\r\n            setBobaContract(bobaToken);\r\n            setMilkToken2Contract(milkToken2);\r\n            setTeaToken2Contract(teaToken2);\r\n            setPearlToken2Contract(pearlToken2);\r\n            const _bobaBalance = await bobaToken.methods.balanceOf(account).call();\r\n            setBobaBalance(_bobaBalance);\r\n        }\r\n        catch (err) {\r\n            console.log(\"Check Network\");\r\n        }\r\n    }\r\n\r\n    const handleStaking = async (stakingAmounts) => {\r\n        console.log(stakingAmounts);\r\n        setLoadingStaking(true);\r\n        if (stakingAmounts.stakeMilk2Amount == \"0\" || stakingAmounts.stakeTea2Amount == \"0\" ||\r\n            stakingAmounts.stakePearl2Amount == \"0\") {\r\n            handleDialogueOpen();\r\n            setLoadingStaking(false);\r\n        }\r\n        else {\r\n            const toStakeMilk2 = stakingAmounts.stakeMilk2Amount;\r\n            const toStakeTea2 = stakingAmounts.stakeTea2Amount;\r\n            const toStakePearl2 = stakingAmounts.stakePearl2Amount;\r\n            try {\r\n                const milk2Tx = await milkToken2Contract.methods.approve(bobaFarmContract._address, toStakeMilk2).send({from: account1});\r\n                const tea2Tx = await teaToken2Contract.methods.approve(bobaFarmContract._address, toStakeTea2).send({from: account1});\r\n                const pearl2Tx = await pearlToken2Contract.methods.approve(bobaFarmContract._address, toStakePearl2).send({from: account1});\r\n                await bobaFarmContract.methods.stakeTokens(toStakeMilk2, toStakeTea2, toStakePearl2).send({from: account1});\r\n                const _bobaBalance = await bobaContract.methods.balanceOf(account1).call();\r\n                setBobaBalance(_bobaBalance);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n                alert(\"Error with MetaMask\");\r\n            }\r\n            finally {\r\n                setLoadingStaking(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleHarvest = async () => {\r\n        try {\r\n            setLoadingHarvest(true);\r\n            await bobaFarmContract.methods.harvestRewards().send({from: account1})\r\n            .then(function(receipt) {\r\n                console.log(receipt);\r\n            });\r\n            const _bobaBalance = await bobaContract.methods.balanceOf(account1).call();\r\n            setBobaBalance(_bobaBalance);\r\n            setLoadingHarvest(false);\r\n        }\r\n        catch (err) {\r\n            handleHarvestDialogueOpen();\r\n            setLoadingHarvest(false);\r\n        }\r\n    }\r\n\r\n    //Not implemented\r\n    // const handleUnstake = async () => {\r\n    // }\r\n\r\n    const getStakeBalances = async() => {\r\n        setIsUpdatingStakeBalances(true);\r\n        try {\r\n            const _milk2StakingBalance = await bobaFarmContract.methods.getMilkStakingBalance(account1).call({});\r\n            const _tea2StakingBalance = await bobaFarmContract.methods.getTeaStakingBalance(account1).call({});\r\n            const _pearl2StakingBalance = await bobaFarmContract.methods.getPearlStakingBalance(account1).call({});\r\n            setStakingBalances(prevState => ({\r\n                ...prevState,\r\n                milk2StakingBalance: _milk2StakingBalance,\r\n                tea2StakingBalance: _tea2StakingBalance,\r\n                pearl2StakingBalance: _pearl2StakingBalance\r\n            }));\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n            alert(\"Error with MetaMask\");\r\n        }\r\n        finally {\r\n            setIsUpdatingStakeBalances(false);\r\n        }\r\n    }\r\n\r\n    const handleDialogueOpen = () => {\r\n        setOpenDialogue(true);\r\n    }\r\n  \r\n    const handleDialogueClose = () => {\r\n        setOpenDialogue(false);\r\n    }\r\n\r\n    const handleHarvestDialogueOpen = () => {\r\n        setOpenHarvestDialogue(true);\r\n    }\r\n  \r\n    const handleHarvestDialogueClose = () => {\r\n        setOpenHarvestDialogue(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const loadBlockchainData = async () => {\r\n            //console.log(account);\r\n            const web3 = await callGetWeb3();\r\n            const acc = await loadAccount(web3);\r\n            await loadFarm(web3, acc);\r\n            await loadTokens(web3, acc);\r\n        }\r\n        loadBlockchainData();\r\n    }, [account])\r\n\r\n    useEffect(() => {\r\n        if (window.ethereum) {\r\n            window.ethereum.on(\"accountsChanged\", handleAccountChange);\r\n            return () => {\r\n                window.ethereum.removeListener(\"accountsChanged\", handleAccountChange);\r\n            }\r\n        }\r\n        else {\r\n            alert(\"Please install MetaMask!\");\r\n        }\r\n      }, [account1])\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{display: \"grid\", alignItems: \"center\", justifyContent: \"center\", paddingTop: \"50px\"}}>\r\n                <Typography variant=\"h3\" gutterBottom>BOBA FARM</Typography>\r\n                <MetaMaskHandler/>\r\n            </Box>\r\n            <Box sx={{display: \"grid\", alignItems: \"center\", justifyContent: \"center\", paddingTop: \"40px\"}}>\r\n                <StakingTable \r\n                onStake={handleStaking} \r\n                onHarvest={handleHarvest} \r\n                onStakingBalances={stakingBalances}\r\n                onRewardBalance={bobaBalance} \r\n                onLoadingHarvest={loadingHarvest} \r\n                onLoadingStaking={loadingStaking}\r\n                onUpdateStakeBalances={getStakeBalances}\r\n                onUpdatingStakeBalances={isUpdatingStakeBalances}/>\r\n            </Box>\r\n\r\n            <Dialog\r\n            open={openDialogue}\r\n            onClose={handleDialogueClose}\r\n            >\r\n                <DialogTitle>\r\n                    Invalid Staking Amount\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Cannot stake 0 of any tokens\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDialogueClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n            open={openHarvestDialogue}\r\n            onClose={handleHarvestDialogueClose}\r\n            >\r\n                <DialogTitle>\r\n                    No Rewards\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Error with MetaMask\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleHarvestDialogueClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    )\r\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Mainpage from \"./components/Mainpage\";\n\nconst App = () => {\n\n  document.body.style.backgroundColor = \"antiquewhite\";\n  \n  return (\n    <div>\n      <Mainpage/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport accountReducer from \"./accountSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        account: accountReducer\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}